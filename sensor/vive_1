// Define constants and variables
const int MAX_ANGLE = 30; // Maximum steering angle for the vehicle
const int MOVE_STRAIGHT = 0; // Straight steering angle
// const int RIGHT = 1;  
// const int LEFT = 0;

// Vehicle and goal positions
float x_front, y_front;   // Front coordinates
float x_rear, y_rear;     // Rear coordinates
float x_goal = 100;       // Goal x-coordinate (example)
float y_goal = 100;       // Goal y-coordinate (example)

// State variables
bool obstacleDetected = false;  // Flag for obstacle detection
bool followingBoundary = false; // Wall-following mode

// Helper functions
float computeHeadingAngle(float x1, float y1, float x2, float y2) {
  // Compute heading angle between two points in degrees
  return atan2(y2 - y1, x2 - x1) * 180.0 / PI;
}

bool isOnMLine() {
  // Check if the vehicle is on the line connecting start to goal (m-line)
  // Replace with your actual computation
  // Example: Use a line equation Ax + By + C = 0
  return true; // Simplified for now
}

bool goalReached() {
  // Check if vehicle is close enough to the goal
  float distance = sqrt(sq(x_goal - x_front) + sq(y_goal - y_front));
  return (distance < 5.0); // Goal tolerance of 5 units
}

void moveStraight() {
  sendSteeringCommand(MOVE_STRAIGHT, RIGHT); // Straight movement
}

void followObstacleBoundary() {
  // Simple obstacle following (right-hand wall-following)
  sendSteeringCommand(15, RIGHT); // Turn slightly right
  delay(500);
  sendSteeringCommand(15, LEFT);  // Turn slightly left
  delay(500);
}

// Main navigation function
void bug2Navigate() {
  if (goalReached()) {
    Serial.println("Goal reached!");
    return;
  }

  if (!obstacleDetected) {
    if (isOnMLine()) {
      // Move toward the goal
      Serial.println("On m-line, moving toward goal...");
      moveStraight();
    } else {
      // Obstacle encountered, switch to boundary following
      Serial.println("Obstacle detected, switching to boundary following...");
      obstacleDetected = true;
      followingBoundary = true;
    }
  } else {
    if (isOnMLine() && followingBoundary) {
      // Reached m-line closer to the goal
      Serial.println("Back on m-line, resuming goal-seeking...");
      obstacleDetected = false;
      followingBoundary = false;
    } else {
      // Follow obstacle boundary
      Serial.println("Following obstacle boundary...");
      followObstacleBoundary();
    }
  }
}

void setup() {
  Serial.begin(9600);
  // Initialize vehicle and sensor inputs here
}

void loop() {
  // Update vehicle's front and rear coordinates from Vive circuit
  // Replace with actual coordinate reading logic
  x_front = analogRead(A0); // Example front x-coordinate
  y_front = analogRead(A1); // Example front y-coordinate
  x_rear = analogRead(A2);  // Example rear x-coordinate
  y_rear = analogRead(A3);  // Example rear y-coordinate

  // Call the Bug 2 navigation function
  bug2Navigate();

  delay(100); // Small delay for stability
}
